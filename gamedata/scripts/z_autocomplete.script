-- Autocomplete Tasks (23-03-17)
-- Autocomplete v3 (20-01-08)
-- For Anomaly 1.5 Update 4 Hotfix 8.1 (19-12-05)

local global_enable = nil
local pda_check = nil
local compensate_item_rewards = nil
local compensation_coefficient = nil

local assault_enable = nil
local bounty_enable = nil
local fate_enable = nil
local scripted_enable = nil
local fetch_enable = nil
local return_enable = nil
local measurements_enable = nil
local scanner_enable = nil

local snitch_enable = nil
local spring_clean_enable = nil
local defend_pump_station_enable = nil
local destroy_btrs_enable = nil
local research_hunt_enable = nil
local recover_tracker_enable = nil

local whitelist = nil
local blacklist = nil
local _dbg = nil

local _task_cache = {}


function dbg_printf(...)
	if _dbg then printf(...) end
end

function has_actor_pda()
	return db.actor:object("device_pda_1")
		or db.actor:object("device_pda_2")
		or db.actor:object("device_pda_3")
		or db.actor:object("device_pda_milspec")
		or false
end

function should_complete_by_task_functor(task_functor_name)
	-- Check assault task
	if task_functor_name == "assault_task_target_functor"
		-- or task_functor_name == "task_targets_lostzone_all" -- Assault Task with companions
		then return assault_enable end

	-- Check bounty task
	if task_functor_name == "general_bounty_task"
		then return bounty_enable end

	-- Check fate task
	if task_functor_name == "general_fate"
		then return fate_enable end

	-- Check scripted task
	if task_functor_name == "recover_item_on_corpse_target_functor"
		then return scripted_enable end

	-- Check fetch task
	if task_functor_name == "general_fetch_task"
		or task_functor_name == "multifetch_target_functor"
		then return fetch_enable end

	-- Check return task
	if task_functor_name == "drx_sl_quest_item_task_target"
		then return return_enable end

	-- Check measurements task
	if task_functor_name == "general_measure"
		then return measurements_enable end

	-- Check scanner task
	if task_functor_name == "anomaly_scanner_task_target"
		then return scanner_enable end

	-- Check special tasks
	if task_functor_name == "top_10_task_target_functor" then return snitch_enable end
	if task_functor_name == "mutants_in_map_target" then return spring_clean_enable end
	if task_functor_name == "gd_task_target_functor" then return defend_pump_station_enable end
	if task_functor_name == "veh_destroy_tf" then return destroy_btrs_enable end
	if task_functor_name == "yan_ecolog_semenov_task_target_1" then return research_hunt_enable end
	if task_functor_name == "recover_mutant_data_target" then return recover_tracker_enable end

	return false
end


function do_autocompletion()
	-- Check if user enabled autocompletion
	if not global_enable then return end

	-- Check if user enabled the pda check and return if actor doesn't have a pda
	if pda_check and not has_actor_pda() then return end

	-- Interate tasks
	local tm = task_manager.get_task_manager()
	for tid, tsk in pairs(tm.task_info) do
		-- Complete task if the check returns true
		if should_autocomplete(tid, tsk.stage) then
			dbg_printf("[AT] Autocompleting task: %s", tid)
			tm:set_task_completed(tid)
		end
	end

	-- Run the check every 2 seconds
	ResetTimeEvent("check_autocomplete_tasks", "check_autocomplete_tasks", 2.0)
end

function is_listed(list, tid)
	if list == "none" then return false end

	local tids = str_explode(list, ",")
	for i = 1, #tids do
		if tids[i] == tid then
			return true
		end
	end

	return false
end

function should_autocomplete(tid, stage)
	-- Check if task is already cached
	if not _task_cache[tid] then
		-- Check if task is defined in the task manager
		local parsed_data = utils_data.parse_ini_section_to_array(task_manager.task_ini, tid)
		if not parsed_data then
			dbg_printf("[AT] Unable to autocomplete task: %s", tid)
		end

		-- Add task to cache
		_task_cache[tid] = parsed_data or {}
	end

	local tsk = _task_cache[tid]

	-- Check if task reached last stage
	if not stage then return false end
	if not tsk.stage_complete then return false end
	if tonumber(tsk.stage_complete) ~= tonumber(stage) then return false end

	-- Check if task is whitelisted
	if is_listed(whitelist, tid) then return true end

	-- Check if task is blacklisted
	if is_listed(blacklist, tid) then return false end

	-- Check if task is not a storyline task
	if tsk.storyline and tsk.storyline == "true" then return false end

	-- Check if task has a whitelisted target functor
	if not tsk.target_functor then return false end
	if not should_complete_by_task_functor(tsk.target_functor) then return false end

	return true
end


function on_option_change()
	-- General options 
	global_enable = z_autocomplete_mcm.get_config("at_general", "enable")
	pda_check = z_autocomplete_mcm.get_config("at_general", "pda_check")
	compensate_item_rewards = z_autocomplete_mcm.get_config("at_general", "compensate_item_rewards")
	compensation_coefficient = z_autocomplete_mcm.get_config("at_general", "compensation_coefficient")

	-- General tasks options
	assault_enable = z_autocomplete_mcm.get_config("at_general_tasks", "assault")
	bounty_enable = z_autocomplete_mcm.get_config("at_general_tasks", "bounty")
	measurements_enable = z_autocomplete_mcm.get_config("at_general_tasks", "measurements")
	fate_enable = z_autocomplete_mcm.get_config("at_general_tasks", "fate")
	scripted_enable = z_autocomplete_mcm.get_config("at_general_tasks", "scripted")
	scanner_enable = z_autocomplete_mcm.get_config("at_general_tasks", "scanner")
	fetch_enable = z_autocomplete_mcm.get_config("at_general_tasks", "fetch")
	return_enable = z_autocomplete_mcm.get_config("at_general_tasks", "return")

	-- Special tasks options
	snitch_enable = z_autocomplete_mcm.get_config("at_special_tasks", "snitch")
	spring_clean_enable = z_autocomplete_mcm.get_config("at_special_tasks", "spring_clean")
	defend_pump_station_enable = z_autocomplete_mcm.get_config("at_special_tasks", "defend_pump_station")
	destroy_btrs_enable = z_autocomplete_mcm.get_config("at_special_tasks", "destroy_btrs")
	research_hunt_enable = z_autocomplete_mcm.get_config("at_special_tasks", "research_hunt")
	recover_tracker_enable = z_autocomplete_mcm.get_config("at_special_tasks", "recover_tracker")

	-- Other options
	whitelist = z_autocomplete_mcm.get_config("at_other", "whitelist")
	blacklist = z_autocomplete_mcm.get_config("at_other", "blacklist")
	_dbg = z_autocomplete_mcm.get_config("at_other", "debug")
end

function actor_on_first_update()
	CreateTimeEvent("check_autocomplete_tasks", "check_autocomplete_tasks", 2.0, do_autocompletion)
end

function on_game_start()
	RegisterScriptCallback("on_option_change", on_option_change)
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	on_option_change()
end

local orig_task_callback = task_manager.task_callback
function task_manager.task_callback(tsk, state)
	-- Check if user wants to compensate items
	if (not global_enable) or (not compensate_item_rewards) then
		orig_task_callback(tsk, state)
		return
	end

	local tsk_id = tsk:get_id()

	-- Check if last stage
	if state ~= task.completed then
		dbg_printf("[AT] No compensation for task %s: not completed yet", tsk_id)
		orig_task_callback(tsk, state)
		return
	end

	-- Check if task id is cached
	if (not tsk_id) or (not _task_cache[tsk_id]) then
		dbg_printf("[AT] No compensation for task %s: task not cached", tsk_id)
		orig_task_callback(tsk, state)
		return
	end

	-- Check if task should get autocompleted
	if not should_autocomplete(tsk_id, _task_cache[tsk_id].stage_complete) then
		dbg_printf("[AT] No compensation for task %s: task category not enabled", tsk_id)
		orig_task_callback(tsk, state)
		return
	end

	local tm = task_manager.get_task_manager()
	local rtask = tm.task_info[tsk_id]

	-- Nil check
	if (not rtask) or (not rtask.on_complete) or (not rtask.on_complete[1]) or (not rtask.on_complete[1][3]) then
		dbg_printf("[AT] No compensation for task %s: on_complete attribute is non-existent or invalid", tsk_id)
		orig_task_callback(tsk, state)
		return
	end

	local lowest_price = math.huge
	local highest_price = -math.huge
	for _, attr in pairs(rtask.on_complete[1][3]) do
		-- attr[1] - attribute name
		-- attr[2] - ?
		-- attr[3] - attribute arguments

		if attr and attr[1] and attr[3] then
			-- Nil checks
			if attr[1] == "reward_random_item" then
				-- Check if on_complete property has a reward_random_item attribute
				for i, itm in pairs(attr[3]) do
					local itm_cost = 0
					local itm_name, itm_amount = string.match(itm, "(.*)__([1-9])")

					-- Check if item is a multiuse item with a defined amount
					if itm_amount then
						local max_uses = ini_sys:r_float(itm_name, "max_uses") or itm_amount
						itm_cost = ini_sys:r_float(itm_name, "cost") or 1000
						itm_cost = itm_cost * (itm_amount / max_uses)
					else
						itm_cost = ini_sys:r_float(itm, "cost") or 500
					end

					-- Add coefficient
					itm_cost = itm_cost * compensation_coefficient

					-- Define lowest and highest bonus price
					if itm_cost > highest_price then
						highest_price = itm_cost
					end
					if itm_cost < lowest_price then
						lowest_price = itm_cost
					end

					-- Remove redundant arguments
					if i > 2 then
						table.remove(attr[3], i)
					end
				end

				-- Overwrite reward_random_item section
				dbg_printf("[AT] Compensate items with min reward %s and max reward %s", lowest_price, highest_price)
				attr[1] = "reward_random_money"
				attr[3][1] = lowest_price
				attr[3][2] = highest_price
			end
		end
	end

	orig_task_callback(tsk, state)
end
